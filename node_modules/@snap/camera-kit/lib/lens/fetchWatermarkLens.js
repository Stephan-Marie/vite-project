import { __awaiter } from "tslib";
import { take } from "rxjs";
import { remoteConfigurationFactory } from "../remote-configuration/remoteConfiguration";
import { Injectable } from "../dependency-injection/Injectable";
import { getLogger } from "../logger/logger";
import { lensRepositoryFactory } from "./LensRepository";
const logger = getLogger("fetchWatermarkLens");
// Special group for all "watermark" lenses that are applied by the Camera Kit internally.
export const watermarksLensGroup = "watermarks";
/**
 * @internal
 */
export const fetchWatermarkLens = Injectable("fetchWatermarkLens", [remoteConfigurationFactory.token, lensRepositoryFactory.token], (remoteConfiguration, lensRepository) => {
    remoteConfiguration
        .getInitializationConfig()
        .pipe(take(1))
        .subscribe({
        next: (config) => __awaiter(void 0, void 0, void 0, function* () {
            if (config.watermarkEnabled) {
                const lens = yield lensRepository.loadLens("", watermarksLensGroup);
                yield lensRepository.cacheLensContent([lens]);
            }
        }),
        error: logger.error,
    });
});
//# sourceMappingURL=fetchWatermarkLens.js.map